Binary encoding of GeoGit objects
=================================

This is the format used for internal storage in the GeoGit object store.

Conventions
-----------

Formats are specified using a modified Backus-Naur notation.
Definitions generally take the form::

    <structure> := part1 part2 part3

Indicating that the structure has three parts.
The parts can be:

* Another structure, referenced by name.
* One of these specially defined structures
  .. code-block::

    NUL    := 0x00 (ASCII NUL character)
    SP     := 0x20 (ASCII space character)
    BR     := 0x0a (ASCII newline character)
    <rev>  := <byte>* (exactly 20 bytes)
    <utf8> := <int16> <byte>* (two-byte count followed by the number of bytes indicated by the count. these should then be decoded as modified UTF-8, as seen in the readUTF and writeUTF methods in the java.io.DataInputStream and java.io.DataOutputStream classes in the Java Standard Library.)
    <byte> := (8 bit byte)
    <int16> := (16 bit signed integer, "short" in Java)
    <int32> := (32 bit signed integer, "int" in Java)
    <int64> := (64 bit signed integer, "long" in Java)
    <float32> := (32 bit IEEE floating point value, "float" in Java)
    <float64> := (64 bit IEEE floating point value, "double" in Java)

* A literal byte sequence.  These are generally used as markers and are represented as text in double quotes (`"`).
  These markers will always be constrained to printable ASCII characters and should be encoded as ASCII, one byte per character.
* A literal byte, specified as a hexidecimal string (for example, 0xFF).
* any of the above suffixed by a modifier:

  * An asterisk (`*`) to indicate 0 or more repetitions
  * A number in brackets (`[]`) to indicate a specific number of repetitions.
* Comments sometimes appear to clarify the intent of certain structures.
  These will be enclosed in parentheses (`()`).
 
Commit
------

.. code-block::

    commit := commitHeader treeRef parent* authorLine committerLine message
    commitHeader := "commit" NUL
<<<<<<< HEAD
    treeRef := "tree" SP <rev> BR
    parent := "parent" SP <rev> BR
    authorLine := "author" SP <utf8> NUL <int64> BR
    committerLine := "committer" SP <utf8> NUL <int64> BR BR
=======
    treeRef := 0x01 <rev>
    parent  := 0x02 <rev>
    authorLine := 0x03 person
    committerLine := 0x04 person
    person := name email timestamp tzOffset
    name := <utf8>
    email := <utf8>
    timestamp := <int64>
    tzOffset := <int32>
>>>>>>> 3b3a2bf... Don't try to mix-n-match text and binary for commits
    message := <utf8>

Tree
----

.. code-block:: 

    tree := treeHeader refs
    treeHeader := "tree" NUL
    refs := empty | nodeAndMore | bucketAndMore
    empty := 0x00
    nodeAndMore := 0x01 type name objectId metadataId bbox
    bucketAndMore := 0x02 index objectId
    type   := <byte>
    name   := <utf8>
    index  := <int32>
    objectId := <rev>
    metadataId := <rev>
    bbox := absentBBox | presentBBox
    absentBBox = <float64>   (Must be NaN, any other value indicates a presentBBox)
    presentBBox = <float64> <float64> <float64> <float64> <utf8> (minx, maxx, miny, maxy, CRS identifier as authority code. for example, EPSG:4326)

Feature
-------

.. code-block:: 

    feature := featureHeader count fields
    featureHeader := "feature" NUL
    count := <int32>
    fields := field*
    field = nullField |
            booleanField | byteField | shortField | intField | longField | floatField | doubleField | stringField |
            booleanArray | byteArray | shortArray | intArray | longArray | floatArray | doubleArray | stringArray |
            geometryField | uuidField | bigIntField | bigDecimalField
    nullField       := 0x00
    booleanField    := 0x01 <byte>
    byteField       := 0x02 <byte>
    shortField      := 0x03 <int16>
    intField        := 0x04 <int32>
    longField       := 0x05 <int64>
    floatField      := 0x06 <float32>
    doubleField     := 0x07 <float64>
    stringField     := 0x08 <utf8>
    booleanArray    := 0x09 <int32> <byte>* (note that the int is the number of boolean values and booleans are packed to save space. so the number of bytes is actually the count of bits divided by 8)
    byteArray       := 0x0A <int32> <byte>*
    shortArray      := 0x0B <int32> <int16>*
    intArray        := 0x0C <int32> <int32>*
    longArray       := 0x0D <int32> <int64>*
    floatArray      := 0x0E <int32> <float32>*
    doubleArray     := 0x0F <int32> <float64>*
    stringArray     := 0x10 <utf8>
    geometryField   := 0x11 <int32> <byte>* (bytes represent the geometry encoded as Well-Known Binary)
    uuidField       := 0x12 <int64> <int64>
    bigIntField     := 0x13 <int32> <byte>*
    bigDecimalField := 0x14 <int32> <int32> <byte>* (scale, length of byte array, byte array)

FeatureType
-----------

.. code-block::
    
    featureType := featureTypeHeader name properties
    featureTypeHeader := "featuretype" NUL
    name := namespace localPart
    namespace := <utf8>
    localPart := <utf8>
    properties := <int32> property*
    property := name type
    type := <byte> (corresponds to the type tags in feature definition.)
